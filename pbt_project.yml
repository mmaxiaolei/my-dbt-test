name: dbt_test1
description: ''
version: 0.0.1
author: null
language: sql
buildSystem: ''
buildSystemDetails: null
pipelines: {}
datasets: {}
templates: {}
jobs: {}
functions:
  author: null
  createdAt: '2023-07-21 08:43:08'
  gems: {}
  udfs: {}
  udafs: {}
  expressions: {}
subgraphs: {}
sqlModels:
  .prophecy/metadata/sqlmodels/stg_orders:
    name: stg_orders
    schema: null
    description: Order data with basic cleaning and transformation applied, one row
      per order.
    author: 412171946@qq.com
    files:
    - models/staging/stg_orders.sql
    - .prophecy/ide/models/stg_orders.json
    - models/staging/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
  .prophecy/metadata/sqlmodels/orders:
    name: orders
    schema: null
    description: Order overview data mart, offering key details for each order inlcluding
      if it's a customer's first order and a food vs. drink item breakdown. One row
      per order.
    author: 412171946@qq.com
    files:
    - models/marts/orders.sql
    - .prophecy/ide/models/orders.json
    - models/marts/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
  .prophecy/metadata/sqlmodels/customers:
    name: customers
    schema: null
    description: Customer overview data mart, offering key details for each unique
      customer. One row per customer.
    author: 412171946@qq.com
    files:
    - models/marts/customers.sql
    - .prophecy/ide/models/customers.json
    - models/marts/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
  .prophecy/metadata/sqlmodels/stg_order_items:
    name: stg_order_items
    schema: null
    description: Individual food and drink items that make up our orders, one row
      per item.
    author: 412171946@qq.com
    files:
    - models/staging/stg_order_items.sql
    - .prophecy/ide/models/stg_order_items.json
    - models/staging/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
  .prophecy/metadata/sqlmodels/stg_customers:
    name: stg_customers
    schema: null
    description: Customer data with basic cleaning and transformation applied, one
      row per customer.
    author: 412171946@qq.com
    files:
    - models/staging/stg_customers.sql
    - .prophecy/ide/models/stg_customers.json
    - models/staging/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
  .prophecy/metadata/sqlmodels/stg_locations:
    name: stg_locations
    schema: null
    description: List of open locations with basic cleaning and transformation applied,
      one row per location.
    author: 412171946@qq.com
    files:
    - models/staging/stg_locations.sql
    - .prophecy/ide/models/stg_locations.json
    - models/staging/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
  .prophecy/metadata/sqlmodels/stg_products:
    name: stg_products
    schema: null
    description: Product (food and drink items that can be ordered) data with basic
      cleaning and transformation applied, one row per product.
    author: 412171946@qq.com
    files:
    - models/staging/stg_products.sql
    - .prophecy/ide/models/stg_products.json
    - models/staging/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
  .prophecy/metadata/sqlmodels/stg_supplies:
    name: stg_supplies
    schema: null
    description: |
      List of our supply expenses data with basic cleaning and transformation applied.
      One row per supply cost, not per supply. As supply costs fluctuate they receive a new row with a new UUID. Thus there can be multiple rows per supply_id.
    author: 412171946@qq.com
    files:
    - models/staging/stg_supplies.sql
    - .prophecy/ide/models/stg_supplies.json
    - models/staging/__models.yml
    sqlDependencies:
      models: []
      datasets: []
    createdAt: '2023-07-21 08:43:09'
sqlMacros:
  .prophecy/metadata/sqlmacros/cents_to_dollars:
    name: cents_to_dollars
    macroType: expression
    description: null
    author: 412171946@qq.com
    files:
    - macros/cents_to_dollars.sql
    - .prophecy/ide/macros/cents_to_dollars.json
    createdAt: '2023-07-21 08:43:09'
sqlSeeds: {}
sqlSources:
  .prophecy/metadata/sqlsources/ecom:
    name: ecom
    description: E-commerce data
    author: 412171946@qq.com
    files:
    - models/staging/__sources.yml
    createdAt: '2023-07-21 08:43:09'
    tables:
    - name: raw_customers
      schema:
        providerType: databricks
        fields: []
      description: One record per person who has purchased one or more items
      author: 412171946@qq.com
      createdAt: '2023-07-21 08:43:09'
    - name: raw_orders
      schema:
        providerType: databricks
        fields: []
      description: One record per order (consisting of one or more order items)
      author: 412171946@qq.com
      createdAt: '2023-07-21 08:43:09'
    - name: raw_items
      schema:
        providerType: databricks
        fields: []
      description: Items included in an order
      author: 412171946@qq.com
      createdAt: '2023-07-21 08:43:09'
    - name: raw_stores
      schema:
        providerType: databricks
        fields: []
      description: One record per physical store location
      author: 412171946@qq.com
      createdAt: '2023-07-21 08:43:09'
    - name: raw_products
      schema:
        providerType: databricks
        fields: []
      description: One record per SKU for items sold in stores
      author: 412171946@qq.com
      createdAt: '2023-07-21 08:43:09'
    - name: raw_supplies
      schema:
        providerType: databricks
        fields: []
      description: One record per supply per SKU of items sold in stores
      author: 412171946@qq.com
      createdAt: '2023-07-21 08:43:09'
sqlUnreferencedSources: {}
sqlPipeline:
  name: sqlPipeline
  description: null
  author: 412171946@qq.com
  createdAt: '2023-07-21 08:43:08'
dependencies: '[]'
projectDependencies: {}
pipelineConfigurations: {}
